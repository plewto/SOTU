#! /usr/bin/python3

import argparse, sys
from pythonosc.udp_client import SimpleUDPClient
from pythonosc import dispatcher
from pythonosc import osc_server

USAGE = """

NAME
    
    oscr - simple OSC receiver.

SYNOPSIS

    oscr [options] 

    Starts OSC server and prints each received message.
    The program may be remotely terminated by transmitting the message /exit
    

DESCRIPTION

    --ip address
         Default 127.0.0.1

    -p --port n
         Default 5005

    -u --usage
        Displays this message and exits. 

REQUIREMENTS:

    python 3+
    python-osc
"""


BANNER = """
Starting OSC server  {} port {}

OSC: """

__server = None

def usage():
    print(USAGE)
    sys.exit(0)

def _exit():
    print("\noscr exited.")
    if __server:
        __server.shutdown()
    sys.exit(0)
    

def _message_handler(*arguments):
    print("{}\nOSC: ".format(arguments), end="")
    if arguments and "exit" in arguments[0]:
        _exit()
    
def serve(ip, port):
    global __server
    try:
        if __server is None:
            print(BANNER.format(ip, port), end="")
            dsp = dispatcher.Dispatcher()
            dsp.map("/*", _message_handler)
            __server = osc_server.ThreadingOSCUDPServer((ip, port), dsp)
            __server.serve_forever()
    except KeyboardInterrupt:
        _exit()
            
        

if __name__ == '__main__':
    parser  = argparse.ArgumentParser()
    parser.add_argument("--ip", default="127.0.0.1", help="ip address")
    parser.add_argument("-p", "--port", type=int, default=5005, help="Port address")
    parser.add_argument("-u", "--usage", action="store_true", help="Display usage and exit")
    args = parser.parse_args()
    if args.usage:
        usage()
    serve(args.ip, args.port)
    sys.exit(0)
