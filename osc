#! /usr/bin/python3

import argparse, sys
from pythonosc.udp_client import SimpleUDPClient
from pythonosc import dispatcher

USAGE = """
A Simple OSC client, transmits single message and exits.

USAGE:

   osc [options] message [values...]

   If 0 are 1 optional value is specified a single value is
   transmitted, otherwise an array is transmitted.

   If no value is specified the transmitted value is None.
   
   If a value may be converted to either an int or float, it is 
   converted to that type for transmission, otherwise it is 
   transmitted as a string.


REQUIREMENTS
    python 3+
    python-osc
"""


enable_echo = False


def isInt(n):
    try:
        int(n)
        return True
    except ValueError:
        return False

def isFloat(n):
    if '.' not in str(n):
        return False
    else:
        try:
            float(n)
            return True
        except ValueError:
            return False


def echo(ip, port, message, value):
    if enable_echo:
        frmt = "OSC Transmitted %s port %s message '%s' %s"
        values = (ip, port, message, value)
        print(frmt % values) 


def transmit(ip, port, message, value):
    echo(ip, port, message, value)
    client = SimpleUDPClient(ip, port)
    client.send_message(message, value)
     
if __name__ == '__main__':
    parser  = argparse.ArgumentParser()
    parser.usage = USAGE
    parser.add_argument("--ip", default="127.0.0.1", help="OSC server ip address, default 1276.0.0.1")
    parser.add_argument("-p", "--port", type=int, default=5005, help="default 5005")
    parser.add_argument("-e", "--echo", action="store_true", help="echo transmitted message to terminal.")
    parser.add_argument("message", help='The OSC message')
    parser.add_argument("values", nargs=argparse.REMAINDER)
    
    args = parser.parse_args()
    enable_echo = args.echo
    values = []
    for v in args.values:
        if isFloat(v):
            values.append(float(v))
        elif isInt(v):
            values.append(int(v))
        else:
            values.append(v)
    if len(values) == 0:
        values = None
    elif len(values) == 1:
        values = values[0]

    transmit(args.ip, args.port, args.message, values)
    sys.exit(0)
